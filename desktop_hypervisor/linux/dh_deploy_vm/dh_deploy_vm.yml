# Copyright 2021-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
- name: dh_deploy_vm
  hosts: localhost
  gather_facts: false
  collections:
    - community.general
  vars:
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
  tasks:
    - name: "Test case block"
      block:
        - name: "Reset the dh_vm_deploy_method per dh_guest_iso_path"
          when:
            - dh_guest_iso_path is defined
            - dh_guest_iso_path | lower is match('.*.(iso|ova|ovf)')
          ansible.builtin.set_fact:
            dh_vm_deploy_method: "{{ dh_guest_iso_path.split('.')[-1] | lower }}"

        - name: "Test setup"
          include_tasks: ../../common/dh_test_setup.yml
          vars:
            create_dh_test_folder: true
            require_dh_vm_exists: "{{ true if (dh_new_vm is undefined or not dh_new_vm | bool) else false }}"

        - name: "Skip test case"
          include_tasks: ../../../common/skip_test_case.yml
          vars:
            skip_msg: "Skip test case due to 'dh_new_vm' is set to '{{ dh_new_vm | default(false) }}' and got VM exists: '{{ dh_vm_exists }}'"
            skip_reason: "Skipped"
          when:
            - dh_new_vm is undefined or not dh_new_vm | bool
            - dh_vm_exists or dh_vm_vmx_exists

        - name: "Skip test case when no vdiskmanager"
          when: dh_vm_deploy_method == "iso"
          block:
            - name: "Check vdiskmanager"
              include_tasks: ../../common/check_vdiskmanager.yml
            - name: "Skip test case"
              include_tasks: ../../../common/skip_test_case.yml
              vars:
                skip_msg: "Test case {{ current_testcase_name }} is blocked due to dh_host_vdisk_manager_exists is '{{ dh_host_vdisk_manager_exists }}''"
                skip_reason: "Blocked"
              when:
                - dh_host_vdisk_manager_exists is undefined or not dh_host_vdisk_manager_exists | bool

        - name: "Make sure no VM running"
          when: dh_new_vm is defined and dh_new_vm | bool
          ansible.builtin.assert:
            that:
              - not dh_vm_exists
              #- not dh_vm_vmx_exists
            fail_msg: "VM with path '{{ dh_vm_vmx_path }}' exists, please set parameter 'dh_vm_new_name' or 'dh_vm_path' to other values."

        - name: "Create {{ dh_vm_path }} on Linux Host"
          ansible.builtin.shell: |
            if [ -d {{ dh_vm_path }} ]; then rm -rf {{ dh_vm_path }}; fi
            mkdir -p {{ dh_vm_path }}
          delegate_to: "{{ host_machine_hostname }}"

        # Change vm_username to root if it is not. And add a new user after VM deployment
        - name: "Set user account for new VM"
          include_tasks: ../../../linux/deploy_vm/set_new_vm_user_account.yml
          vars:
            vm_username: "{{ dh_vm_username }}"

        - name: "Set fact of timestamp for VM hostname"
          ansible.builtin.set_fact:
            hostname_timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

        - name: "Get SSH public key from localhost"
          include_tasks: ../../../linux/utils/get_local_ssh_public_key.yml

        - name: "Create temp folder for generating unattend install ISO file"
          include_tasks: ../../../common/create_temp_file_dir.yml
          vars:
            tmp_dir: "{{ local_cache }}"
            tmp_state: "directory"
            tmp_prefix: "unattend_iso_"

        - name: "Initialize fact of unattend install cache folder"
          ansible.builtin.set_fact:
            unattend_iso_cache: "{{ tmp_path }}"

        - name: "Deploy VM by creating a new VM and install OS from ISO image on it"
          when: (dh_vm_deploy_method is undefined) or (dh_vm_deploy_method == "iso")
          include_tasks: deploy_vm_from_iso.yml

        # OVA deployment is applicable for OS releases which have OVA deliverables, e.g.
        # VMware Photon OS, Ubuntu cloud image, Flatcar, or Amazon Linux, etc
        - name: "Deploy VM from an OVA/OVF template"
          when: (dh_vm_deploy_method is defined) and (dh_vm_deploy_method == "ova" or dh_vm_deploy_method == "ovf")
          include_tasks: deploy_vm_from_ova.yml

        - name: "Print VM guest IP address"
          when: vm_guest_ip is defined and vm_guest_ip
          ansible.builtin.debug: var=vm_guest_ip
      rescue:
        - name: "Take a VM screenshot when autoinstall fails"
          include_tasks: ../../common/dh_vm_take_screenshot.yml
          vars:
            screenshot_name: "failure"
          when: dh_vm_deploy_method == "iso"
        - name: "Test case failure"
          include_tasks: ../../common/dh_test_rescue.yml
          vars:
            exit_testing_when_fail: true
