# Copyright 2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
# This test case is to verify open-vm-tools installation.
# If VM doesn't install open-vm-tools, this case will install open-vm-tools from OS ISO image (RHEL/SLES/SLED)
# or official online repository (Ubuntu/Debian/VMware Photon OS/CentOS/RockyLinux/OracleLinux/ProLinux).
# If it already has open-vm-tools installed and update_tools parameter is set True in vars/test.yml,
# it will reinstall open-vm-tools. And then check the install or reinstall output.
#
- name: ovt_verify_pkg_install
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Test case block"
      block:
        - name: "Set update VMware tools by default"
          when: dh_update_vmtools is undefined
          ansible.builtin.set_fact:
            dh_update_vmtools: true

        - name: "VM has open-vm-tools installed and dh_update_vmtools is set false"
          when: not dh_update_vmtools | bool
          include_tasks: ../../../common/skip_test_case.yml
          vars:
            skip_msg: "Test case '{{ ansible_play_name }}' is skipped because dh_update_vmtools is set to: {{ dh_update_vmtools }}"
            skip_reason: "Skipped"

        - name: "Skip test case"
          when: >
            dh_guest_id is defined and
            (dh_guest_id is match('.*other.*linux.*') or
            dh_guest_id is match('.*rhel(5|6).*'))
          include_tasks: ../../../common/skip_test_case.yml
          vars:
            skip_msg: "Skip test case due to {{ dh_guest_id }} is not supported by {{ current_testcase_name }}'"
            skip_reason: "Not Supported"

        - name: "Test setup"
          include_tasks: ../../common/dh_test_setup.yml
          vars:
            create_dh_test_folder: true
            require_dh_vm_exists: "{{ true if (dh_new_vm is undefined or not dh_new_vm | bool) else false }}"

        - name: "Make sure Guest VM is exists"
          when: dh_new_vm is defined and dh_new_vm | bool
          ansible.builtin.assert:
            that:
              - dh_vm_exists
              - dh_vm_vmx_exists
            fail_msg: "VM with path '{{ dh_vm_vmx_path }}' is not exists, please deploy vm first."

        # Initialize variables
        - name: "Initialize variables for installing open-vm-tools"
          ansible.builtin.set_fact:
            uninstall_tools: false
            install_tools: false

        - name: "Set the fact for uninstalling open-vm-tools"
          when:
            - vmtools_info_from_vmtoolsd is defined
            - vmtools_info_from_vmtoolsd
            - dh_update_vmtools
            - dh_guest_id is not match('.*centos7.*')
            - dh_guest_id is not match('.*rhel7.*')
            - dh_guest_id is not match('.*opensuse.*')
          ansible.builtin.set_fact:
            uninstall_tools: true

        - name: "Set facts of open-vm-tools packages, processes and service"
          include_tasks: ../../../linux/utils/set_ovt_facts.yml

        - name: "Set facts of VGAuthService process and service"
          include_tasks: ../../../linux/utils/set_vgauth_facts.yml

        - name: "Get OS commands to uninstall or install open-vm-tools"
          include_tasks: ../../../linux/open_vm_tools/get_install_uninstall_cmd.yml

        - name: "Uninstall open-vm-tools for reinstall"
          when:
            - uninstall_tools is defined
            - uninstall_tools
          #include_tasks: ../../../linux/open_vm_tools/uninstall_ovt.yml
          include_tasks: uninstall_ovt.yml
          vars:
            vm_guest_ip: "{{ dh_vm_guest_ip }}"

        # Initialize the variable for installing tools
        - name: "Set the fact for installing tools"
          when: >
            (vmtools_is_installed is undefined) or
            (not vmtools_is_installed) or
            (vmtools_is_removed is defined and vmtools_is_removed)
          ansible.builtin.set_fact:
            install_tools: true

        - name: "Install open-vm-tools packages"
          when:
            - install_tools is defined
            - install_tools
          include_tasks: install_ovt.yml
          vars:
            vm_guest_ip: "{{ dh_vm_guest_ip }}"

        - name: "Reset guest OS in desktop hypervisor"
          include_tasks: ../../common/dh_host_power_vm.yml
          vars:
            vm_power_option: "reset"
            vmrun_extra_option: "hard"

        - name: "Check VM connection is not broken"
          include_tasks: ../../../common/vm_wait_connection.yml
          vars:
            vm_wait_connection_timeout: 60
          when: guest_os_ansible_distribution not in ['VMware Photon OS', 'CentOS', 'RedHat', 'OracleLinux', 'Fedora', 'AlmaLinux', 'Rocky']

        - name: "Get VM guest info including detailed data"
          include_tasks: ../../common/dh_get_guest_info.yml

        - name: "Shutdown guest OS in desktop hypervisor"
          include_tasks: ../../common/dh_host_power_vm.yml
          vars:
            vm_power_option: "stop"
            vmrun_extra_option: "hard"
      rescue:
        - name: "Test case failure"
          include_tasks: ../../common/dh_test_rescue.yml
          vars:
            exit_testing_when_fail: true
